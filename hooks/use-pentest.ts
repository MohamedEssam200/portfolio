"use client"

import { useState } from "react"

interface ScanResult {
  target: string
  scan_time: string
  summary: {
    open_ports: number
    services: number
    vulnerabilities: number
    critical_high: number
  }
  open_ports: number[]
  services: Array<{
    port: number
    service: string
    banner: string
    version: string
  }>
  vulnerabilities: Array<{
    type: string
    severity: string
    description: string
    port?: number
    service?: string
    recommendation: string
  }>
}

export function usePentest() {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const runFullScan = async (target: string): Promise<ScanResult | null> => {
    setLoading(true)
    setError(null)

    try {
      const response = await fetch("/api/pentest/scan", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ target }),
      })

      const data = await response.json()

      if (response.ok && data.success) {
        return data.report
      } else {
        setError(data.error || "Scan failed")
        return null
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Network error")
      return null
    } finally {
      setLoading(false)
    }
  }

  const runQuickScan = async (target: string, scanType: string) => {
    setLoading(true)
    setError(null)

    try {
      const response = await fetch("/api/pentest/quick-scan", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ target, scanType }),
      })

      const data = await response.json()

      if (response.ok) {
        return data
      } else {
        setError(data.error || "Quick scan failed")
        return null
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Network error")
      return null
    } finally {
      setLoading(false)
    }
  }

  return {
    loading,
    error,
    runFullScan,
    runQuickScan,
  }
}
