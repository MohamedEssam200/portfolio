"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Shield,
  Search,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Play,
  Download,
  Globe,
  Server,
  Database,
  Wifi,
  Target,
  Activity,
  FileText,
  Settings,
} from "lucide-react"

interface Vulnerability {
  id: string
  type: string
  severity: "Critical" | "High" | "Medium" | "Low"
  description: string
  port?: number
  service?: string
  recommendation: string
  cvss?: number
  cve?: string
}

interface ScanResult {
  id: string
  target: string
  scanType: "quick" | "comprehensive" | "web" | "network"
  status: "scanning" | "completed" | "failed"
  progress: number
  vulnerabilities: Vulnerability[]
  openPorts: number[]
  services: { port: number; service: string; version: string; banner?: string }[]
  startTime: Date
  endTime?: Date
  totalHosts?: number
  aliveHosts?: number
}

interface ScanConfig {
  target: string
  scanType: "quick" | "comprehensive" | "web" | "network"
  portRange: string
  timeout: number
  threads: number
  aggressive: boolean
}

export default function PenTestToolkit() {
  const [scanConfig, setScanConfig] = useState<ScanConfig>({
    target: "",
    scanType: "quick",
    portRange: "1-1000",
    timeout: 5000,
    threads: 50,
    aggressive: false,
  })

  const [scanResults, setScanResults] = useState<ScanResult[]>([])
  const [isScanning, setIsScanning] = useState(false)
  const [currentScan, setCurrentScan] = useState<ScanResult | null>(null)
  const [activeTab, setActiveTab] = useState("scanner")

  const mockVulnerabilities: Vulnerability[] = [
    {
      id: "1",
      type: "SQL Injection",
      severity: "Critical",
      description: "Potential SQL injection vulnerability detected in login form parameter 'username'",
      port: 80,
      service: "HTTP",
      recommendation: "Use parameterized queries and input validation. Implement prepared statements.",
      cvss: 9.8,
      cve: "CVE-2023-1234",
    },
    {
      id: "2",
      type: "Outdated Software",
      severity: "High",
      description: "Apache HTTP Server 2.2.15 detected with multiple known vulnerabilities",
      port: 80,
      service: "HTTP",
      recommendation: "Update Apache to version 2.4.54 or later. Apply security patches.",
      cvss: 7.5,
      cve: "CVE-2022-31813",
    },
    {
      id: "3",
      type: "Weak SSL Configuration",
      severity: "Medium",
      description: "SSL certificate uses weak cipher suites (TLS 1.0, RC4)",
      port: 443,
      service: "HTTPS",
      recommendation: "Configure strong cipher suites, disable TLS 1.0/1.1, implement HSTS.",
      cvss: 5.3,
    },
    {
      id: "4",
      type: "Directory Traversal",
      severity: "High",
      description: "Directory listing enabled on /admin/ path exposing sensitive files",
      port: 80,
      service: "HTTP",
      recommendation: "Disable directory listing and implement proper access controls.",
      cvss: 7.2,
    },
    {
      id: "5",
      type: "Cross-Site Scripting (XSS)",
      severity: "Medium",
      description: "Reflected XSS vulnerability in search parameter",
      port: 80,
      service: "HTTP",
      recommendation: "Implement input validation and output encoding. Use CSP headers.",
      cvss: 6.1,
      cve: "CVE-2023-5678",
    },
  ]

  const mockServices = [
    { port: 21, service: "FTP", version: "vsftpd 3.0.2", banner: "220 Welcome to FTP Server" },
    { port: 22, service: "SSH", version: "OpenSSH 7.4", banner: "SSH-2.0-OpenSSH_7.4" },
    { port: 25, service: "SMTP", version: "Postfix 3.1.1", banner: "220 mail.example.com ESMTP Postfix" },
    { port: 53, service: "DNS", version: "BIND 9.11.4", banner: "DNS Server" },
    { port: 80, service: "HTTP", version: "Apache 2.2.15", banner: "Server: Apache/2.2.15" },
    { port: 110, service: "POP3", version: "Dovecot 2.2.36", banner: "+OK Dovecot ready" },
    { port: 143, service: "IMAP", version: "Dovecot 2.2.36", banner: "* OK IMAP4rev1 ready" },
    { port: 443, service: "HTTPS", version: "Apache 2.2.15", banner: "Server: Apache/2.2.15" },
    { port: 993, service: "IMAPS", version: "Dovecot 2.2.36", banner: "* OK IMAP4rev1 ready" },
    { port: 995, service: "POP3S", version: "Dovecot 2.2.36", banner: "+OK Dovecot ready" },
    { port: 3306, service: "MySQL", version: "5.7.32", banner: "MySQL 5.7.32" },
    { port: 5432, service: "PostgreSQL", version: "12.8", banner: "PostgreSQL 12.8" },
  ]

  const startScan = () => {
    if (!scanConfig.target) return

    setIsScanning(true)
    const newScan: ScanResult = {
      id: Date.now().toString(),
      target: scanConfig.target,
      scanType: scanConfig.scanType,
      status: "scanning",
      progress: 0,
      vulnerabilities: [],
      openPorts: [],
      services: [],
      startTime: new Date(),
      totalHosts: 1,
      aliveHosts: 0,
    }

    setCurrentScan(newScan)
    setScanResults([newScan, ...scanResults])

    // Simulate scanning progress
    const interval = setInterval(() => {
      setCurrentScan((prev) => {
        if (!prev) return null

        const increment = scanConfig.scanType === "quick" ? Math.random() * 20 : Math.random() * 10
        const newProgress = Math.min(prev.progress + increment, 100)

        if (newProgress >= 100) {
          clearInterval(interval)

          // Generate results based on scan type
          const vulnerabilityCount = scanConfig.scanType === "comprehensive" ? 5 : scanConfig.scanType === "web" ? 3 : 2
          const serviceCount = scanConfig.scanType === "network" ? 12 : scanConfig.scanType === "comprehensive" ? 8 : 4

          const completedScan: ScanResult = {
            ...prev,
            status: "completed",
            progress: 100,
            vulnerabilities: mockVulnerabilities.slice(0, vulnerabilityCount),
            openPorts: mockServices.slice(0, serviceCount).map((s) => s.port),
            services: mockServices.slice(0, serviceCount),
            endTime: new Date(),
            aliveHosts: 1,
          }

          setScanResults((results) => results.map((r) => (r.id === prev.id ? completedScan : r)))
          setCurrentScan(null)
          setIsScanning(false)
          return completedScan
        }

        const updatedScan = { ...prev, progress: newProgress }
        setScanResults((results) => results.map((r) => (r.id === prev.id ? updatedScan : r)))
        return updatedScan
      })
    }, 500)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical":
        return "bg-red-100 text-red-800 border-red-200"
      case "High":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "Medium":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "Low":
        return "bg-blue-100 text-blue-800 border-blue-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "Critical":
      case "High":
        return <XCircle className="h-4 w-4" />
      case "Medium":
        return <AlertTriangle className="h-4 w-4" />
      case "Low":
        return <CheckCircle className="h-4 w-4" />
      default:
        return <CheckCircle className="h-4 w-4" />
    }
  }

  const exportReport = (result: ScanResult) => {
    const report = {
      scan: {
        target: result.target,
        type: result.scanType,
        startTime: result.startTime,
        endTime: result.endTime,
        duration: result.endTime ? Math.round((result.endTime.getTime() - result.startTime.getTime()) / 1000) : 0,
      },
      summary: {
        totalVulnerabilities: result.vulnerabilities.length,
        criticalVulnerabilities: result.vulnerabilities.filter((v) => v.severity === "Critical").length,
        highVulnerabilities: result.vulnerabilities.filter((v) => v.severity === "High").length,
        openPorts: result.openPorts.length,
        services: result.services.length,
      },
      vulnerabilities: result.vulnerabilities,
      services: result.services,
    }

    const blob = new Blob([JSON.stringify(report, null, 2)], { type: "application/json" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `pentest_report_${result.target}_${Date.now()}.json`
    a.click()
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-100 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">PenTest Toolkit</h1>
            <p className="text-gray-600">Advanced Penetration Testing Suite</p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge className="bg-red-100 text-red-800">
              <Shield className="h-3 w-3 mr-1" />
              Security Scanner
            </Badge>
            <Badge className="bg-blue-100 text-blue-800">{scanResults.length} Scans Completed</Badge>
          </div>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="scanner" className="flex items-center space-x-2">
              <Target className="h-4 w-4" />
              <span>Scanner</span>
            </TabsTrigger>
            <TabsTrigger value="results" className="flex items-center space-x-2">
              <Activity className="h-4 w-4" />
              <span>Results</span>
            </TabsTrigger>
            <TabsTrigger value="reports" className="flex items-center space-x-2">
              <FileText className="h-4 w-4" />
              <span>Reports</span>
            </TabsTrigger>
            <TabsTrigger value="settings" className="flex items-center space-x-2">
              <Settings className="h-4 w-4" />
              <span>Settings</span>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="scanner" className="space-y-6">
            {/* Scan Configuration */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Search className="h-5 w-5 text-red-600" />
                  Scan Configuration
                </CardTitle>
                <CardDescription>Configure your penetration testing parameters</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium mb-2">Target</label>
                      <Input
                        placeholder="Enter target (IP, domain, or CIDR)"
                        value={scanConfig.target}
                        onChange={(e) => setScanConfig({ ...scanConfig, target: e.target.value })}
                        disabled={isScanning}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-2">Scan Type</label>
                      <select
                        value={scanConfig.scanType}
                        onChange={(e) => setScanConfig({ ...scanConfig, scanType: e.target.value as any })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        disabled={isScanning}
                      >
                        <option value="quick">Quick Scan</option>
                        <option value="comprehensive">Comprehensive Scan</option>
                        <option value="web">Web Application Scan</option>
                        <option value="network">Network Infrastructure Scan</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-2">Port Range</label>
                      <Input
                        placeholder="1-65535"
                        value={scanConfig.portRange}
                        onChange={(e) => setScanConfig({ ...scanConfig, portRange: e.target.value })}
                        disabled={isScanning}
                      />
                    </div>
                  </div>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium mb-2">Timeout (ms)</label>
                      <Input
                        type="number"
                        value={scanConfig.timeout}
                        onChange={(e) => setScanConfig({ ...scanConfig, timeout: Number.parseInt(e.target.value) })}
                        disabled={isScanning}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-2">Threads</label>
                      <Input
                        type="number"
                        value={scanConfig.threads}
                        onChange={(e) => setScanConfig({ ...scanConfig, threads: Number.parseInt(e.target.value) })}
                        disabled={isScanning}
                      />
                    </div>
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        id="aggressive"
                        checked={scanConfig.aggressive}
                        onChange={(e) => setScanConfig({ ...scanConfig, aggressive: e.target.checked })}
                        disabled={isScanning}
                      />
                      <label htmlFor="aggressive" className="text-sm font-medium">
                        Aggressive Scanning (May be detected)
                      </label>
                    </div>
                  </div>
                </div>
                <Button
                  onClick={startScan}
                  disabled={!scanConfig.target || isScanning}
                  className="w-full bg-red-600 hover:bg-red-700"
                >
                  <Play className="h-4 w-4 mr-2" />
                  {isScanning ? "Scanning..." : "Start Penetration Test"}
                </Button>
              </CardContent>
            </Card>

            {/* Current Scan Progress */}
            {currentScan && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <span>Scanning: {currentScan.target}</span>
                    <Badge className="bg-blue-100 text-blue-800">
                      {currentScan.scanType.charAt(0).toUpperCase() + currentScan.scanType.slice(1)} Scan
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <div className="flex justify-between text-sm mb-2">
                        <span>Scan Progress</span>
                        <span>{Math.round(currentScan.progress)}%</span>
                      </div>
                      <Progress value={currentScan.progress} className="h-2" />
                    </div>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                      <div className="flex items-center space-x-2">
                        <Globe className="h-4 w-4 text-blue-600" />
                        <span>Port Scanning</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Server className="h-4 w-4 text-green-600" />
                        <span>Service Detection</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Database className="h-4 w-4 text-purple-600" />
                        <span>Vulnerability Check</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Wifi className="h-4 w-4 text-orange-600" />
                        <span>SSL Analysis</span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="results" className="space-y-6">
            {scanResults.map((result) => (
              <Card key={result.id} className="overflow-hidden">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-2">
                      <Shield className="h-5 w-5 text-red-600" />
                      {result.target} - {result.scanType.charAt(0).toUpperCase() + result.scanType.slice(1)} Scan
                    </CardTitle>
                    <div className="flex items-center space-x-2">
                      {result.status === "completed" && (
                        <>
                          <Badge
                            className={`${
                              result.vulnerabilities.filter((v) => v.severity === "Critical").length > 0
                                ? "bg-red-100 text-red-800"
                                : result.vulnerabilities.filter((v) => v.severity === "High").length > 0
                                  ? "bg-orange-100 text-orange-800"
                                  : "bg-green-100 text-green-800"
                            }`}
                          >
                            {result.vulnerabilities.length} Issues Found
                          </Badge>
                          <Button size="sm" variant="outline" onClick={() => exportReport(result)}>
                            <Download className="h-4 w-4 mr-2" />
                            Export Report
                          </Button>
                        </>
                      )}
                    </div>
                  </div>
                  {result.endTime && (
                    <CardDescription>
                      Completed in {Math.round((result.endTime.getTime() - result.startTime.getTime()) / 1000)} seconds
                    </CardDescription>
                  )}
                </CardHeader>

                {result.status === "completed" && (
                  <CardContent className="space-y-6">
                    {/* Summary Stats */}
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      <div className="text-center p-4 bg-gray-50 rounded-lg">
                        <div className="text-2xl font-bold text-gray-900">{result.openPorts.length}</div>
                        <div className="text-sm text-gray-600">Open Ports</div>
                      </div>
                      <div className="text-center p-4 bg-gray-50 rounded-lg">
                        <div className="text-2xl font-bold text-gray-900">{result.services.length}</div>
                        <div className="text-sm text-gray-600">Services</div>
                      </div>
                      <div className="text-center p-4 bg-red-50 rounded-lg">
                        <div className="text-2xl font-bold text-red-600">
                          {
                            result.vulnerabilities.filter((v) => v.severity === "Critical" || v.severity === "High")
                              .length
                          }
                        </div>
                        <div className="text-sm text-gray-600">Critical/High</div>
                      </div>
                      <div className="text-center p-4 bg-yellow-50 rounded-lg">
                        <div className="text-2xl font-bold text-yellow-600">
                          {result.vulnerabilities.filter((v) => v.severity === "Medium" || v.severity === "Low").length}
                        </div>
                        <div className="text-sm text-gray-600">Medium/Low</div>
                      </div>
                    </div>

                    {/* Services */}
                    <div>
                      <h3 className="text-lg font-semibold mb-3">Detected Services</h3>
                      <div className="grid gap-2">
                        {result.services.map((service, idx) => (
                          <div key={idx} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div className="flex items-center space-x-3">
                              <Badge variant="secondary">Port {service.port}</Badge>
                              <span className="font-medium">{service.service}</span>
                              <span className="text-sm text-gray-600">{service.version}</span>
                            </div>
                            {service.banner && (
                              <span className="text-xs text-gray-500 font-mono">{service.banner}</span>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Vulnerabilities */}
                    <div>
                      <h3 className="text-lg font-semibold mb-3">Vulnerabilities</h3>
                      <div className="space-y-3">
                        {result.vulnerabilities.map((vuln) => (
                          <Card key={vuln.id} className="border-l-4 border-l-red-500">
                            <CardContent className="p-4">
                              <div className="flex items-start justify-between mb-2">
                                <div className="flex items-center space-x-2">
                                  {getSeverityIcon(vuln.severity)}
                                  <h4 className="font-semibold text-gray-900">{vuln.type}</h4>
                                  {vuln.cve && (
                                    <Badge variant="outline" className="text-xs">
                                      {vuln.cve}
                                    </Badge>
                                  )}
                                </div>
                                <div className="flex items-center space-x-2">
                                  <Badge className={getSeverityColor(vuln.severity)}>{vuln.severity}</Badge>
                                  {vuln.cvss && <Badge variant="outline">CVSS: {vuln.cvss}</Badge>}
                                </div>
                              </div>
                              <p className="text-gray-700 mb-2">{vuln.description}</p>
                              {vuln.port && (
                                <div className="flex items-center space-x-4 text-sm text-gray-600 mb-2">
                                  <span>Port: {vuln.port}</span>
                                  <span>Service: {vuln.service}</span>
                                </div>
                              )}
                              <div className="bg-blue-50 p-3 rounded-lg">
                                <h5 className="font-medium text-blue-900 mb-1">Recommendation:</h5>
                                <p className="text-blue-800 text-sm">{vuln.recommendation}</p>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                )}
              </Card>
            ))}

            {scanResults.length === 0 && (
              <Card className="text-center py-12">
                <CardContent>
                  <Shield className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">No scans performed yet</h3>
                  <p className="text-gray-600">Start your first penetration test from the Scanner tab.</p>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="reports" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Scan Reports</CardTitle>
                <CardDescription>Download and manage your penetration testing reports</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {scanResults
                    .filter((r) => r.status === "completed")
                    .map((result) => (
                      <div key={result.id} className="flex items-center justify-between p-4 border rounded-lg">
                        <div>
                          <h4 className="font-medium">{result.target}</h4>
                          <p className="text-sm text-gray-600">
                            {result.scanType} scan - {result.vulnerabilities.length} vulnerabilities found
                          </p>
                          <p className="text-xs text-gray-500">
                            {result.startTime.toLocaleDateString()} {result.startTime.toLocaleTimeString()}
                          </p>
                        </div>
                        <Button size="sm" variant="outline" onClick={() => exportReport(result)}>
                          <Download className="h-4 w-4 mr-2" />
                          Download
                        </Button>
                      </div>
                    ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="settings" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Scanner Settings</CardTitle>
                <CardDescription>Configure default scanning parameters</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Default Timeout (ms)</label>
                    <Input type="number" defaultValue="5000" />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">Default Threads</label>
                    <Input type="number" defaultValue="50" />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">Default Port Range</label>
                    <Input defaultValue="1-1000" />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">Scan Delay (ms)</label>
                    <Input type="number" defaultValue="0" />
                  </div>
                </div>
                <div className="space-y-2">
                  <label className="flex items-center space-x-2">
                    <input type="checkbox" />
                    <span className="text-sm">Enable verbose logging</span>
                  </label>
                  <label className="flex items-center space-x-2">
                    <input type="checkbox" />
                    <span className="text-sm">Auto-save scan results</span>
                  </label>
                  <label className="flex items-center space-x-2">
                    <input type="checkbox" />
                    <span className="text-sm">Enable real-time notifications</span>
                  </label>
                </div>
                <Button className="bg-red-600 hover:bg-red-700">Save Settings</Button>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
