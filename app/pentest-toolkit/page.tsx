"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import {
  Shield,
  Search,
  AlertTriangle,
  CheckCircle,
  XCircle,
  ArrowLeft,
  Play,
  Download,
  Globe,
  Server,
  Database,
  Wifi,
} from "lucide-react"
import Link from "next/link"

interface Vulnerability {
  id: string
  type: string
  severity: "Critical" | "High" | "Medium" | "Low"
  description: string
  port?: number
  service?: string
  recommendation: string
}

interface ScanResult {
  target: string
  status: "scanning" | "completed" | "failed"
  progress: number
  vulnerabilities: Vulnerability[]
  openPorts: number[]
  services: { port: number; service: string; version: string }[]
}

export default function PenTestToolkit() {
  const [target, setTarget] = useState("")
  const [scanResults, setScanResults] = useState<ScanResult[]>([])
  const [isScanning, setIsScanning] = useState(false)
  const [currentScan, setCurrentScan] = useState<ScanResult | null>(null)

  const mockVulnerabilities: Vulnerability[] = [
    {
      id: "1",
      type: "SQL Injection",
      severity: "Critical",
      description: "Potential SQL injection vulnerability detected in login form",
      port: 80,
      service: "HTTP",
      recommendation: "Use parameterized queries and input validation",
    },
    {
      id: "2",
      type: "Outdated Software",
      severity: "High",
      description: "Apache server version 2.2.15 has known vulnerabilities",
      port: 80,
      service: "HTTP",
      recommendation: "Update Apache to latest stable version",
    },
    {
      id: "3",
      type: "Weak SSL Configuration",
      severity: "Medium",
      description: "SSL certificate uses weak cipher suites",
      port: 443,
      service: "HTTPS",
      recommendation: "Configure strong cipher suites and disable weak protocols",
    },
    {
      id: "4",
      type: "Directory Traversal",
      severity: "High",
      description: "Directory listing enabled on /admin/ path",
      port: 80,
      service: "HTTP",
      recommendation: "Disable directory listing and implement proper access controls",
    },
  ]

  const mockServices = [
    { port: 22, service: "SSH", version: "OpenSSH 7.4" },
    { port: 80, service: "HTTP", version: "Apache 2.2.15" },
    { port: 443, service: "HTTPS", version: "Apache 2.2.15" },
    { port: 3306, service: "MySQL", version: "5.7.32" },
    { port: 21, service: "FTP", version: "vsftpd 3.0.2" },
  ]

  const startScan = () => {
    if (!target) return

    setIsScanning(true)
    const newScan: ScanResult = {
      target,
      status: "scanning",
      progress: 0,
      vulnerabilities: [],
      openPorts: [],
      services: [],
    }

    setCurrentScan(newScan)
    setScanResults([newScan, ...scanResults])

    // Simulate scanning progress
    const interval = setInterval(() => {
      setCurrentScan((prev) => {
        if (!prev) return null

        const newProgress = prev.progress + Math.random() * 15

        if (newProgress >= 100) {
          clearInterval(interval)
          const completedScan = {
            ...prev,
            status: "completed" as const,
            progress: 100,
            vulnerabilities: mockVulnerabilities,
            openPorts: [22, 80, 443, 3306, 21],
            services: mockServices,
          }

          setScanResults((results) => results.map((r) => (r.target === prev.target ? completedScan : r)))
          setCurrentScan(null)
          setIsScanning(false)
          return completedScan
        }

        const updatedScan = { ...prev, progress: newProgress }
        setScanResults((results) => results.map((r) => (r.target === prev.target ? updatedScan : r)))
        return updatedScan
      })
    }, 500)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical":
        return "bg-red-100 text-red-800 border-red-200"
      case "High":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "Medium":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "Low":
        return "bg-blue-100 text-blue-800 border-blue-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "Critical":
      case "High":
        return <XCircle className="h-4 w-4" />
      case "Medium":
        return <AlertTriangle className="h-4 w-4" />
      case "Low":
        return <CheckCircle className="h-4 w-4" />
      default:
        return <CheckCircle className="h-4 w-4" />
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-100 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <Link href="/">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Portfolio
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">PenTest Toolkit</h1>
              <p className="text-gray-600">Automated Vulnerability Scanner</p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Badge className="bg-red-100 text-red-800">
              <Shield className="h-3 w-3 mr-1" />
              Security Scanner
            </Badge>
          </div>
        </div>

        {/* Scan Input */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Search className="h-5 w-5 text-red-600" />
              Target Configuration
            </CardTitle>
            <CardDescription>Enter a target IP address or domain to begin security assessment</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-4">
              <Input
                placeholder="Enter target (e.g., 192.168.1.1 or example.com)"
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                className="flex-1"
                disabled={isScanning}
              />
              <Button onClick={startScan} disabled={!target || isScanning} className="bg-red-600 hover:bg-red-700">
                <Play className="h-4 w-4 mr-2" />
                {isScanning ? "Scanning..." : "Start Scan"}
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Current Scan Progress */}
        {currentScan && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Scanning: {currentScan.target}</span>
                <Badge className="bg-blue-100 text-blue-800">In Progress</Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <div className="flex justify-between text-sm mb-2">
                    <span>Scan Progress</span>
                    <span>{Math.round(currentScan.progress)}%</span>
                  </div>
                  <Progress value={currentScan.progress} className="h-2" />
                </div>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div className="flex items-center space-x-2">
                    <Globe className="h-4 w-4 text-blue-600" />
                    <span>Port Scanning</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Server className="h-4 w-4 text-green-600" />
                    <span>Service Detection</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Database className="h-4 w-4 text-purple-600" />
                    <span>Vulnerability Check</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Wifi className="h-4 w-4 text-orange-600" />
                    <span>SSL Analysis</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Scan Results */}
        <div className="space-y-6">
          {scanResults.map((result, index) => (
            <Card key={index} className="overflow-hidden">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <Shield className="h-5 w-5 text-red-600" />
                    Scan Results: {result.target}
                  </CardTitle>
                  <div className="flex items-center space-x-2">
                    {result.status === "completed" && (
                      <>
                        <Badge
                          className={`${result.vulnerabilities.filter((v) => v.severity === "Critical").length > 0 ? "bg-red-100 text-red-800" : "bg-green-100 text-green-800"}`}
                        >
                          {result.vulnerabilities.length} Issues Found
                        </Badge>
                        <Button size="sm" variant="outline">
                          <Download className="h-4 w-4 mr-2" />
                          Export Report
                        </Button>
                      </>
                    )}
                  </div>
                </div>
              </CardHeader>

              {result.status === "completed" && (
                <CardContent className="space-y-6">
                  {/* Summary Stats */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center p-4 bg-gray-50 rounded-lg">
                      <div className="text-2xl font-bold text-gray-900">{result.openPorts.length}</div>
                      <div className="text-sm text-gray-600">Open Ports</div>
                    </div>
                    <div className="text-center p-4 bg-gray-50 rounded-lg">
                      <div className="text-2xl font-bold text-gray-900">{result.services.length}</div>
                      <div className="text-sm text-gray-600">Services</div>
                    </div>
                    <div className="text-center p-4 bg-red-50 rounded-lg">
                      <div className="text-2xl font-bold text-red-600">
                        {
                          result.vulnerabilities.filter((v) => v.severity === "Critical" || v.severity === "High")
                            .length
                        }
                      </div>
                      <div className="text-sm text-gray-600">Critical/High</div>
                    </div>
                    <div className="text-center p-4 bg-yellow-50 rounded-lg">
                      <div className="text-2xl font-bold text-yellow-600">
                        {result.vulnerabilities.filter((v) => v.severity === "Medium" || v.severity === "Low").length}
                      </div>
                      <div className="text-sm text-gray-600">Medium/Low</div>
                    </div>
                  </div>

                  {/* Services */}
                  <div>
                    <h3 className="text-lg font-semibold mb-3">Detected Services</h3>
                    <div className="grid gap-2">
                      {result.services.map((service, idx) => (
                        <div key={idx} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center space-x-3">
                            <Badge variant="secondary">Port {service.port}</Badge>
                            <span className="font-medium">{service.service}</span>
                          </div>
                          <span className="text-sm text-gray-600">{service.version}</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Vulnerabilities */}
                  <div>
                    <h3 className="text-lg font-semibold mb-3">Vulnerabilities</h3>
                    <div className="space-y-3">
                      {result.vulnerabilities.map((vuln) => (
                        <Card key={vuln.id} className="border-l-4 border-l-red-500">
                          <CardContent className="p-4">
                            <div className="flex items-start justify-between mb-2">
                              <div className="flex items-center space-x-2">
                                {getSeverityIcon(vuln.severity)}
                                <h4 className="font-semibold text-gray-900">{vuln.type}</h4>
                              </div>
                              <Badge className={getSeverityColor(vuln.severity)}>{vuln.severity}</Badge>
                            </div>
                            <p className="text-gray-700 mb-2">{vuln.description}</p>
                            {vuln.port && (
                              <div className="flex items-center space-x-4 text-sm text-gray-600 mb-2">
                                <span>Port: {vuln.port}</span>
                                <span>Service: {vuln.service}</span>
                              </div>
                            )}
                            <div className="bg-blue-50 p-3 rounded-lg">
                              <h5 className="font-medium text-blue-900 mb-1">Recommendation:</h5>
                              <p className="text-blue-800 text-sm">{vuln.recommendation}</p>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                </CardContent>
              )}
            </Card>
          ))}
        </div>

        {scanResults.length === 0 && (
          <Card className="text-center py-12">
            <CardContent>
              <Shield className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">No scans performed yet</h3>
              <p className="text-gray-600">Enter a target above to begin your first security assessment.</p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
