import { type NextRequest, NextResponse } from "next/server"
import { spawn } from "child_process"
import path from "path"

export async function POST(request: NextRequest) {
  try {
    const { target } = await request.json()

    if (!target) {
      return NextResponse.json({ error: "Target is required" }, { status: 400 })
    }

    // Validate target format (basic validation)
    const ipRegex = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/
    const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$/

    if (!ipRegex.test(target) && !domainRegex.test(target)) {
      return NextResponse.json({ error: "Invalid target format" }, { status: 400 })
    }

    // Execute Python scanner
    const scannerPath = path.join(process.cwd(), "scripts", "pentest_scanner.py")

    return new Promise((resolve) => {
      const pythonProcess = spawn("python3", [scannerPath, target])

      let output = ""
      let errorOutput = ""

      pythonProcess.stdout.on("data", (data) => {
        output += data.toString()
      })

      pythonProcess.stderr.on("data", (data) => {
        errorOutput += data.toString()
      })

      pythonProcess.on("close", (code) => {
        if (code === 0) {
          try {
            // Extract JSON report from output
            const jsonStart = output.lastIndexOf("{")
            const jsonReport = output.substring(jsonStart)
            const report = JSON.parse(jsonReport)

            resolve(
              NextResponse.json({
                success: true,
                report,
                raw_output: output,
              }),
            )
          } catch (parseError) {
            resolve(
              NextResponse.json(
                {
                  error: "Failed to parse scan results",
                  raw_output: output,
                  stderr: errorOutput,
                },
                { status: 500 },
              ),
            )
          }
        } else {
          resolve(
            NextResponse.json(
              {
                error: "Scan failed",
                stderr: errorOutput,
                exit_code: code,
              },
              { status: 500 },
            ),
          )
        }
      })

      // Timeout after 5 minutes
      setTimeout(() => {
        pythonProcess.kill()
        resolve(
          NextResponse.json(
            {
              error: "Scan timeout",
              partial_output: output,
            },
            { status: 408 },
          ),
        )
      }, 300000)
    })
  } catch (error) {
    return NextResponse.json(
      {
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}
