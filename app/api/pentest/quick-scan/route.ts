import { type NextRequest, NextResponse } from "next/server"
import { exec } from "child_process"
import { promisify } from "util"

const execAsync = promisify(exec)

export async function POST(request: NextRequest) {
  try {
    const { target, scanType } = await request.json()

    if (!target) {
      return NextResponse.json({ error: "Target is required" }, { status: 400 })
    }

    let command = ""

    switch (scanType) {
      case "ping":
        command = `ping -c 4 ${target}`
        break
      case "nmap-quick":
        command = `nmap -F ${target}`
        break
      case "nmap-service":
        command = `nmap -sV -p 1-1000 ${target}`
        break
      case "traceroute":
        command = `traceroute ${target}`
        break
      default:
        return NextResponse.json({ error: "Invalid scan type" }, { status: 400 })
    }

    try {
      const { stdout, stderr } = await execAsync(command, { timeout: 30000 })

      return NextResponse.json({
        success: true,
        command,
        output: stdout,
        error: stderr || null,
      })
    } catch (execError: any) {
      return NextResponse.json({
        success: false,
        command,
        error: execError.message,
        output: execError.stdout || "",
        stderr: execError.stderr || "",
      })
    }
  } catch (error) {
    return NextResponse.json(
      {
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}
